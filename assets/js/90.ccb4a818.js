(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{472:function(e,t,a){"use strict";a.r(t);var s=a(42),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"前端跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端跨域"}},[e._v("#")]),e._v(" 前端跨域")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("什么是跨域呢？"),a("br"),e._v("\n跨域就是浏览器为了安全而做出的限制策略，我们知道浏览器的请求必须遵循同源策略，既同域名，同端口，同协议，当请求违反了同源策略时，就产生了跨域。")])]),e._v(" "),a("li",[a("p",[e._v("那么怎么解决跨域呢？"),a("strong",[e._v("无论是怎样的跨域资源获取方案，本质上都需要服务器端的支持")])]),e._v(" "),a("ol",[a("li",[e._v("CORS（跨域资源共享）")]),e._v(" "),a("li",[e._v("jsonp跨域")]),e._v(" "),a("li",[e._v("nodejs中间件代理跨域")]),e._v(" "),a("li",[e._v("nginx代理跨域")]),e._v(" "),a("li",[e._v("postMessage跨域")]),e._v(" "),a("li",[e._v("document.domain + iframe跨域")]),e._v(" "),a("li",[e._v("location.hash + iframe")]),e._v(" "),a("li",[e._v("window.name + iframe跨域")]),e._v(" "),a("li",[e._v("WebSocket协议跨域")])])])]),e._v(" "),a("h2",{attrs:{id:"cors-跨域资源共享"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cors-跨域资源共享"}},[e._v("#")]),e._v(" CORS(跨域资源共享)"),a("br")]),e._v(" "),a("p",[e._v('CORS是一个W3C标准，全称是"跨域资源共享"（Cross-origin resource sharing）。它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。')]),e._v(" "),a("ul",[a("li",[a("p",[e._v("什么时候需要用到cors？"),a("br"),e._v("\n跨域资源共享标准（ cross-origin sharing standard ）允许在下列场景中使用跨域 HTTP 请求：")]),e._v(" "),a("ul",[a("li",[e._v("前文提到的由 XMLHttpRequest 或 Fetch 发起的跨域 HTTP 请求。")]),e._v(" "),a("li",[e._v("Web 字体 (CSS 中通过 @font-face 使用跨域字体资源), 因此，网站就可以发布 - - TrueType 字体资源，并只允许已授权网站进行跨站调用。")]),e._v(" "),a("li",[e._v("WebGL 贴图")]),e._v(" "),a("li",[e._v("使用 drawImage 将 Images/video 画面绘制到 canvas")])])])]),e._v(" "),a("h3",{attrs:{id:"简单请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单请求"}},[e._v("#")]),e._v(" 简单请求")]),e._v(" "),a("p",[e._v("浏览器将cors的请求分为简单请求和非简单请求："),a("br")]),e._v(" "),a("ul",[a("li",[e._v("同时满足一下条件就是简单请求:"),a("br"),e._v("\nMethods: HEAD, GET, POST(方法只能为这三个)"),a("br"),e._v("\nHTTP的头信息不超出以下几种字段："),a("br")])]),e._v(" "),a("ol",[a("li",[e._v("Accept")]),e._v(" "),a("li",[e._v("Accept-Language")]),e._v(" "),a("li",[e._v("Content-Language")]),e._v(" "),a("li",[e._v("Last-Event-ID")]),e._v(" "),a("li",[e._v("Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain")])]),e._v(" "),a("ul",[a("li",[e._v("服务器处理属性")])]),e._v(" "),a("ol",[a("li",[e._v("Access-Control-Allow-Origin 设置哪个源可以访问我")]),e._v(" "),a("li",[e._v("Access-Control-Allow-Headers 允许携带哪个头访问我")]),e._v(" "),a("li",[e._v("Access-Control-Allow-Methods 允许哪个方法访问我")]),e._v(" "),a("li",[e._v("Access-Control-Allow-Credentials 允许携带 cookie，若是开启，前端的.withCredentials 也必须设置为 true;如果要发送cookie，Access-Control-Allow-Origin就不能设置为*，必须是相对应的域名")]),e._v(" "),a("li",[e._v("Access-Control-Max-Age 预检的存活时间")]),e._v(" "),a("li",[e._v("Access-Control-Expose-Headers 允许返回的头，把响应头暴露出去给前端")])]),e._v(" "),a("h3",{attrs:{id:"非简单请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非简单请求"}},[e._v("#")]),e._v(" 非简单请求")]),e._v(" "),a("p",[e._v("除了简单请求外的就是非简单请求。"),a("br"),e._v("\n它在请求之前会增加一次HTTP查询请求，叫“预检”的过程，浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。")]),e._v(" "),a("h2",{attrs:{id:"postmessage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#postmessage"}},[e._v("#")]),e._v(" postMessage")]),e._v(" "),a("p",[e._v("postMessage 是 HTML5 XMLHttRequest Level 2 中的 API，允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递"),a("br"),e._v("\notherWindow.postMessage(message, targetOrigin, [transfer])"),a("br")]),e._v(" "),a("p",[e._v("otherWindow：其他窗口的一个引用"),a("br"),e._v("\nmessage：将要发送到其他窗口的信息\ntargetOrigin：指定哪些窗口能接收到消息事件\ntransfer：可选，一串和message 同时传递的 Transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权")]),e._v(" "),a("h2",{attrs:{id:"websocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[e._v("#")]),e._v(" websocket")]),e._v(" "),a("p",[e._v("webSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了，因此可以跨域")]),e._v(" "),a("p",[e._v('WebSocket 协议本质是一个基于 TCP 的协议，为了建立一个 WebSocket 连接，客户端浏览器首先要向服务器发起一个 HTTP 请求，其中附加头信息 "Upgrade:WebSocket"，表明这是一个申请协议升级的 HTTP 请求，服务器端解析这些附加的头信息然后产生应答信息，状态码101返回给客户端，客户端和服务器端的 WebSocket 连接就建立起来了，双方就可以通过这个连接通道自由的传递信息，并且这个连接会持续存在直到客户端或者服务器端的某一方主动的关闭连接')]),e._v(" "),a("p",[e._v("Socket.io\n前端：\nnew webSocket()\nsocket.onopen()\nsocket.onmessage()\n后端：\nnew WebSocket.Server({port})\non('connection')\nws.on('message')")]),e._v(" "),a("h2",{attrs:{id:"node中间件代理-两次跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node中间件代理-两次跨域"}},[e._v("#")]),e._v(" node中间件代理(两次跨域)")]),e._v(" "),a("p",[e._v("实现原理: 同源策略是浏览器需要遵循的标准,而如果是服务器向服务器请求就无需遵循同源策略。")]),e._v(" "),a("p",[e._v("接收客户端请求\n将请求转发给服务器\n拿到服务器响应数据\n将响应转发给客户端\n#Nginx 反向代理\n即所有客户端的请求都必须先经过 nginx 的处理，nginx 作为代理服务器再讲请求转发给 node 或者 java 服务，这样就规避了同源策略")]),e._v(" "),a("h2",{attrs:{id:"document-domain-iframe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-domain-iframe"}},[e._v("#")]),e._v(" document.domain + iframe")]),e._v(" "),a("p",[e._v("该方式只能用于二级域名相同的情况下，比如 a.test.com 和 b.test.com，只需要给页面添加 document.domain ='test.com' 表示二级域名都相同就可以实现跨域，两个页面都通过 js 强制设置 document.domain 为基础主域，就实现了同域")]),e._v(" "),a("h2",{attrs:{id:"location-hash-iframe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#location-hash-iframe"}},[e._v("#")]),e._v(" location.hash + iframe")]),e._v(" "),a("p",[e._v("原理就是改变URL的hash部分来进行双向通信\na.html 要和 c.html 跨域相互通信，通过中间页 b.html 来实现。 三个页面，不同域之间利用 iframe 的 location.hash 传值，相同域之间直接 js 访问来通信")]),e._v(" "),a("p",[e._v("缺点：\n数据直接暴露在了url中，数据容量和类型都有限等")]),e._v(" "),a("h2",{attrs:{id:"window-name-iframe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window-name-iframe"}},[e._v("#")]),e._v(" window.name + iframe")]),e._v(" "),a("p",[e._v("window 对象有 name 属性，该属性有个特征：即在一个窗口(window)的生命周期内，窗口载入的所有的页面都是共享一个 window.name，每个页面对 window.name 都有读写的权限，window.name 是持久存在一个窗口载入过的所有页面中的，在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值，可以利用这个特点进行跨域")])])}),[],!1,null,null,null);t.default=n.exports}}]);